/* Configuration for running using on an HPC with a slurm scheduler
*/
process {
  executor='slurm' // run using slurm backend (unless a process specifies otherwise), Nextflow will generate the sbatch script and submit for you
  memory = 2.GB // Default for all tasks that do not designate something specific
  cache = 'lenient' // Disables timestamp check in caching, default caching includes timestamp and this can be broken on systems with file partitions that vary timestamping in unexpected ways

  withLabel: networkBound {
    executor = 'local' // example of a label based override, this means the local executor is used for download heavy processes.  Local in this context means the resources allocated under the Nextflow manager sbatch script.
    maxForks = 1 // maxForks is number of parallel tasks allowed.  For downloads, downloading one thing at a time seems to make sense.
  }

  withName:'FETCH_ISA|ISA_TO_RUNSHEET|COPY_READS' {
    cpus   = { 1                    }
    memory = { 2.GB                 }
  }

  withName:'RAW_FASTQC|TRIMMED_FASTQC' {
    cpus   = { 2     * task.attempt }  // used 198 cpu. to do: compare 4
    memory = { 4.GB  * task.attempt }
  }

  withName:TRIMGALORE {
    // see https://github.com/FelixKrueger/TrimGalore/blob/master/Docs/Trim_Galore_User_Guide.md
    cpus   = { 8    * task.attempt  }  // 1 ->16, use 662.5 cpu: compare 8
    memory = { 2.GB                 }
  }

  withName:ALIGN_BISMARK {
      cpus   = { 4                    }
      memory = { 48.GB }
      errorStrategy = { 
          [137].contains(task.exitStatus) ? 'retry' : 'terminate' 
      }
  }

  withLabel: maxCPU {
    cpus = 8
  }

  withLabel: medCPU {
    cpus = 4
  }

  withLabel: med_mem {
    memory = 10.GB
  }

  withLabel: big_mem {
    memory = 32.GB
  }

  withLabel: align_mem {
    memory = 128.GB
  }

}

executor { // entire executor scope parameters. I.E. parameters that define how an entire executor should operate
  // Again this refers to the resources allocated in the initial user-submitted sbatch script
  $local {
      cpus = 2 // should match the inital user-submitted sbatch script, MAY be entirely redundant, need to test further
  }

  // this refers to jobs launched via the slurm executor (I typically have the local executor handle downloads and very fast jobs like concatting ERCC fasta to ref fasta while the slurm executor handles longer running and more resource-intensive tasks)
  $slurm {
      queueSize = 32
  }
}
